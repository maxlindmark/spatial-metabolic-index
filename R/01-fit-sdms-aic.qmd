---
title: "Fit tweedie/delta models to biomass density and extract AIC"
author: "Max Lindmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    fig-width: 8
    #fig-asp: 0.618
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Intro

Fit Tweedie or delta models models to biomass density of cod, flounder, plaice and dab (juveniles and adults) between 1993-2020 in the Baltic Sea using sdmMTB fit different oxygen and temperature-related covariates, compare AIC. Select the "best" covariate for further trend and velocity analysis.

## Load packages & source functions

```{r load libraries}
#| message: false
#| warning: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "readxl", "tidylog", "RCurl", "devtools",
          "kableExtra", "viridis", "RColorBrewer", "here", "sdmTMBextra") 

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library, character.only = T))

# Packages not on CRAN or dev version
# remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE)
library(sdmTMB)

# Source code for map plots
# You need: # devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/maxlindmark/pred-prey-overlap/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")

# Set path
home <- here::here()
```

## Read data

```{r read data}
# Read data
d <- #readr::read_csv("https://raw.githubusercontent.com/maxlindmark/spatial-metabolic-index/main/data/clean/catch_clean.csv") |>
  readr::read_csv(paste0(home, "/data/clean/catch_clean.csv")) |>
  rename(X = x, Y = y) |> 
  pivot_longer(c(cod_adult, cod_juvenile, dab_adult, dab_juvenile, flounder_adult,
                 flounder_juvenile, plaice_adult, plaice_juvenile),
               names_to = "group", values_to = "density") |> 
  separate(group, into = c("species", "life_stage"), remove = FALSE) |> 
  drop_na(depth, temp, oxy, sal, density)

# Read metabolic parameter estimates and left_join
mi_pars <- #readr::read_csv("https://raw.githubusercontent.com/maxlindmark/spatial-metabolic-index/main/data/clean/mi_params.csv") |>
  readr::read_csv(paste0(home, "/data/clean/mi_params.csv")) |> 
  dplyr::select(n_o2, E_o2, A0_o2, species) #  TODO: remove the extra columns for pressure based parameters

# TODO: for now we'll use plaice parameters for flounder, see "00_estimate_mi_params.Rmd"
mi_pars

mi_pars <- mi_pars |> 
  mutate(A0_o2 = ifelse(species == "flounder",
                        filter(mi_pars, species == "plaice")$A0_o2,
                        A0_o2))

d <- left_join(d, mi_pars, by = "species")

# Read size csv to calculate the metabolic index
sizes <- #readr::read_csv("https://raw.githubusercontent.com/maxlindmark/spatial-metabolic-index/main/data/clean/sizes.csv") |> 
  readr::read_csv(paste0(home, "/data/clean/sizes.csv")) |>
  mutate(group = paste(species, name, sep = "_")) |> 
  dplyr::select(group, B)

d <- left_join(d, sizes, by = "group")

# Drop dab!
# d |>
#   filter(group == "dab_juvenile" & quarter == 1) |>
#   mutate(pres = ifelse(density > 0, "1", "0")) |>
#   ggplot(aes(X, Y, color = pres)) +
#   geom_point(size = 0.3) +
#   coord_fixed() +
#   facet_wrap(~year)
# 
# d |>
#   filter(group == "dab_juvenile" & quarter == 4) |>
#   mutate(pres = ifelse(density > 0, "1", "0")) |>
#   ggplot(aes(X, Y, color = pres)) +
#   geom_point(size = 0.3) +
#   coord_fixed() +
#   facet_wrap(~year)

d <- d |> filter(!species == "dab")
```

## Calculate the metabolic index

```{r calculate metabolic index}
# Oxygen is ml/L, We want micro mol/L. 1 ml/l = 10^3/22.391 = 44.661 micro mol/l
d$oxy_si <- (d$oxy * (10^3)) / 22.391

# Calculate metabolic indices for a given mass and the temperature and oxygen in data
# Line 123 in https://github.com/fate-spatialindicators/SDM_O2/blob/master/code/mi_functions.R
kb <- 0.000086173324 # Boltzmann's constant
t_ref <- 15 # arbitrary reference temperature

# Calculate the metabolic index
d <- d |>
  mutate(inv_temp = (1/(temp + 273.15) - 1/(t_ref + 273.15)),
         phi = A0_o2*(B^n_o2)*oxy_si * exp((E_o2/kb)*inv_temp)) |> 
  drop_na(phi)
```

## Scale variables

```{r}
d <- d |> 
  group_by(group) |> 
  mutate(phi_sc = scale(phi),
         temp_sc = scale(temp),
         temp_sq = temp_sc^2,
         oxy_sc = scale(oxy),
         oxy_sq = oxy_sc^2,
         sal_sc = scale(sal),
         depth_sc = scale(depth),
         depth_sq = depth_sc*depth_sc) |> # not sure this is needed!
  mutate(quarter_f = as.factor(quarter),
         year_f = as.factor(year)) |> 
  ungroup()

# Seems like a non-linear relationship with temperature, but a quadratic largely does the job??
ggplot(d, aes(temp_sc, density)) +
  geom_smooth(method = "lm", color = "grey50", se = FALSE) +
  geom_smooth(method = "gam", formula = y~s(x, k=4), color = "steelblue3", se = FALSE) +
  geom_smooth(method = "lm", formula = y ~ x + I(x^2), color = "tomato3", se = FALSE) +
  facet_wrap(~group, scales = "free")

ggplot(d, aes(oxy_sc, density)) +
  geom_smooth(method = "lm", color = "grey50", se = FALSE) +
  geom_smooth(method = "gam", formula = y~s(x, k=4), color = "steelblue3", se = FALSE) +
  geom_smooth(method = "lm", formula = y ~ x + I(x^2), color = "tomato3", se = FALSE) +
  facet_wrap(~group, scales = "free")

ggplot(d, aes(phi_sc, log(density + 1))) +
  geom_smooth(method = "lm", color = "grey50", se = FALSE) +
  geom_smooth(method = "gam", formula = y~s(x, k=4), color = "steelblue3", se = FALSE) +
  geom_smooth(method = "lm", formula = y ~ x + I(x^2), color = "tomato3", se = FALSE) +
  facet_wrap(~group, scales = "free")
```

```{r}
# Plot mi by species and life stage
pal <- brewer.pal(name = "Dark2", n = 8)

d |> 
  mutate(species = str_to_title(species),
         life_stage = str_to_title(life_stage)) |> 
  ggplot(aes(phi, fill = species, color = species)) + 
  geom_density(alpha = 0.2) + 
  geom_vline(xintercept = 0, linetype = 2) + 
  coord_cartesian(expand = 0) + 
  facet_wrap(~ life_stage, ncol = 1) +
  theme_sleek(base_size = 9) + 
  theme(legend.position = c(0.85, 0.85)) +
  labs(x = "Metabolic index (\u03C6)", y = "Density", fill = "Species", color = "Species") + 
  scale_color_manual(values = rev(pal), name = "") +
  scale_fill_manual(values = rev(pal), name = "")

ggsave(paste0(home, "/figures/mi_histogram.pdf"), width = 11, height = 11, units = "cm", device = cairo_pdf)
```

## Fit models and save AIC

Fit models!

```{r fit models}
data_list_aic <- list()

for(i in unique(d$group)) {  
    
    dd <- d |> filter(group == i)
    
    mesh <- make_mesh(dd, xy_cols = c("X", "Y"), cutoff = 15) # Need specific meshes because not for all hauls did we record all species
    
    ggplot() +
      inlabru::gg(mesh$mesh) +
      coord_fixed() +
      geom_point(aes(X, Y), data = dd, alpha = 0.2, size = 0.5) +
      annotate("text", -Inf, Inf, label = paste("n knots = ", mesh$mesh$n), hjust = -0.3, vjust = 3) + 
      labs(x = "Easting (km)", y = "Northing (km)", title = str_to_sentence(str_replace(i, "_", " ")))
    
    ggsave(paste0(home, "/figures/supp/mesh_aic_", i, ".pdf"), width = 17, height = 17, units = "cm")

    print(i)
    
    # 1. Linear oxygen and squared temperature, spatially varying quarter
    m1 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + oxy_sc,
                 data = dd,
                 mesh = mesh,
                 #time_varying = ~0 + depth_sc + depth_sq, # if enabled, remove from the main formula
                 #family = delta_gamma(link1 = "logit", link2 = "log"),
                 family = tweedie(link = "log"),
                 #spatiotemporal = "off",
                 spatiotemporal = "IID",
                 # this setting for spatial field(s) works better for majority of groups compare to single sf
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f, # if enabled, keep quarter_f in main formula; 
                 time = "year")
    print("m1")
    sanity(m1)
    dd$m1_res <- residuals(m1)
    
    # 2. interaction between linear oxygen and temperature, drop quadratic
    #m2 <- update(m1, density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc * oxy_sc)
    # TODO: can't use update with delta models?
     m2 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc * oxy_sc,
                  data = dd,
                  mesh = mesh,
                  #family = delta_gamma(link1 = "logit", link2 = "log"),
                  family = tweedie(link = "log"),
                  #spatiotemporal = "off",
                  spatiotemporal = "IID",
                  spatial = "off",
                  spatial_varying = ~0 + quarter_f,
                  time = "year")
    print("m2")
    sanity(m2)
    dd$m2_res <- residuals(m2)

    # 3. breakpoint oxygen
    #m3 <- update(m1, density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + breakpt(oxy_sc))
    m3 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + breakpt(oxy_sc),
                 data = dd,
                 mesh = mesh,
                 #family = delta_gamma(link1 = "logit", link2 = "log"),
                 family = tweedie(link = "log"),
                 #spatiotemporal = "off",
                 spatiotemporal = "IID",
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f,
                 time = "year")
    print("m3")
    sanity(m3)
    dd$m3_res <- residuals(m3)

    # 4. logistic oxygen
    # m4 <- update(m1, density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + logistic(oxy_sc))
    # m4 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + logistic(oxy_sc),
    #              data = dd,
    #              mesh = mesh,
    #              family = delta_gamma(link1 = "logit", link2 = "log"),
    #              spatiotemporal = "off",
    #              spatial = "on",
    #              time = "year",
    #              control = sdmTMBcontrol(newton_loops = 2))
    # print("m4")
    # sanity(m4)
    # dd$m4_res <- residuals(m4)

    # 5. linear metabolic index
    #m5 <- update(m1, density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + phi_sc)
    m5 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + phi_sc,
                 data = dd,
                 mesh = mesh,
                 #family = delta_gamma(link1 = "logit", link2 = "log"),
                 family = tweedie(link = "log"),
                 #spatiotemporal = "off",
                 spatiotemporal = "IID",
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f,
                 time = "year")
    print("m5")
    sanity(m5)
    dd$m5_res <- residuals(m5)

    # 6. breakpoint metabolic index!
    #m6 <- update(m1, density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + breakpt(phi_sc))
    m6 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + breakpt(phi_sc),
                 data = dd,
                 mesh = mesh,
                 #family = delta_gamma(link1 = "logit", link2 = "log"),
                 family = tweedie(link = "log"),
                 #spatiotemporal = "off",
                 spatiotemporal = "IID",
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f,
                 time = "year")
    print("m6")
    sanity(m6)
    dd$m6_res <- residuals(m6)
    
    # logistic metabolic index!
    # m7 <- update(m1, density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + logistic(phi_sc))
    # print("m7")
    # sanity(m7)
    # dd$m7_res <- residuals(m7)
    
    # Plot residuals
    p1 <- dd |>
      dplyr::select(m1_res,
                    m2_res,
                    m3_res,
                    #m4_res,
                    m5_res,
                    m6_res,
                    #m7_res
                    ) |>
      pivot_longer(everything()) |>
      ggplot(aes(sample = value)) +
      stat_qq(size = 0.75, shape = 21, fill = NA) +
      facet_wrap(~name) +
      stat_qq_line() +
      labs(y = "Sample Quantiles", x = "Theoretical Quantiles") +
      theme(aspect.ratio = 1)
    
    print(p1)

    # Save AIC
    data_list_aic[[i]] <- AIC(m1,
                              m2,
                              m3,
                              #m4,
                              m5,
                              m6#,
                              #m7
                              ) |>
      tibble::rownames_to_column("model") |>
      mutate(group = i)
    
}

# Save aic as data frames
data_aic <- bind_rows(data_list_aic)

write_csv(data_aic, paste0(home, "/output/data_aic_01.csv"))

# TODO: check why I can't use update, see if I can use logistic now that I use delta models
```

## Plot AIC

```{r}
aic <- read_csv(paste0(home, "/output/data_aic_01.csv")) |> 
  mutate(formula = ifelse(model == "m1", "*temp+temp<sup>2</sup>+oxy*", NA),
         formula = ifelse(model == "m2", "*temp×oxy*", formula),
         formula = ifelse(model == "m3", "*temp+temp<sup>2</sup>+bp(oxy)*", formula),
         #formula = ifelse(model == "m4", "*temp+temp<sup>2</sup>+logistic(oxy)*", formula),
         formula = ifelse(model == "m5", "*\u03C6*", formula),
         formula = ifelse(model == "m6", "*bp(\u03C6)*", formula)#,
         #formula = ifelse(model == "m7", "logistic(phi)", formula)
         ) |> 
  group_by(group) |> 
  mutate(delta_aic = AIC - min(AIC),
         Favoured = ifelse(delta_aic < 2, "Y", "N")) |> 
  ungroup() |> 
  separate(group, into = c("species", "life_stage")) |> 
  mutate(species = str_to_title(species),
         life_stage = str_to_title(life_stage)) |> 
  mutate(group2 = paste(species, life_stage))
  
order <- unique(aic$formula)

ggplot(aic, aes(group2, delta_aic, color = factor(formula, levels = order),
                shape = Favoured)) +
  geom_jitter(size = 2, alpha = 0.6, height = 0, width = 0.15) + 
  scale_color_brewer(palette = "Set1") +
  #scale_color_brewer(palette = "Paired") +
  coord_flip() +
  labs(x = "", y = "\u0394 AIC", color = "Formula", alpha = "Lowest AIC") +
  theme(legend.text = ggtext::element_markdown(size = 7)) + 
  guides(color = guide_legend(ncol = 2, title.hjust = 0.5),
         shape = guide_legend(title.hjust = 0.5)) +
  theme(legend.position = "bottom",
        legend.direction = "vertical",
        legend.title = element_text(size = 8)) +
  NULL

ggsave(paste0(home, "/figures/aic.pdf"), width = 11, height = 11, units = "cm", device = cairo_pdf)
```

```{r}
knitr::knit_exit()
```

```{r}
plot(k)
```

### EXTRA EXPLORATION
## Test if qqplots are improved with spatiotemporal... 

Some questions I'm working on:

- QQ plots are improved greatly when I use ST random fields (for delta model).
  - Yes! stored in st folder 

```{r residuals from st random fields?}
pred_list <- list()

for(i in unique(d$group)) { 
    
    dd <- d |> filter(group == i)

    mesh <- make_mesh(dd, xy_cols = c("X", "Y"), cutoff = 15)

    # this is m3 (bp oxy)
    m3 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + breakpt(oxy_sc),
                 data = dd,
                 mesh = mesh,
                 family = delta_gamma(link1 = "logit", link2 = "log"),
                 spatiotemporal = "IID",
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f,
                 time = "year",
                 control = sdmTMBcontrol(newton_loops = 2))
        
    # Check again to be safe...
    sanity(m3)

    dd$res_1 <- residuals(m3, model = 1)
    dd$res_2 <- residuals(m3, model = 2)
    
    p1 <- ggplot(dd, aes(sample = res_1)) +
      stat_qq() +
      stat_qq_line() +
      labs(y = "Sample Quantiles", x = "Theoretical Quantiles", title = "Binomial") + 
      theme(aspect.ratio = 1)
    
    p2 <- ggplot(dd, aes(sample = res_2)) +
      stat_qq() +
      stat_qq_line() +
      labs(y = "Sample Quantiles", x = "Theoretical Quantiles", title = "Gamma") + 
      theme(aspect.ratio = 1)
    
    p1 + p2 
    ggsave(paste0(home, "/figures/supp/qq-sdm-01/st-fields/qq_", i, ".pdf"),
           width = 17, height = 11, units = "cm")
    
}
```

- Next I want to know if ST or not affects the AIC result. The latest delta gamma suggests bp oxygen is best. 
  - it does not! saved as AICst

- I need to know how ST fields affects parameter estimates.
  - Not really in a systematic way as far as I can see!

```{r compare parameter estimates using cod}
data_list_pars <- list()

for(i in unique(d$group)) {  
    
    dd <- d |> filter(group == i)
    
    mesh <- make_mesh(dd, xy_cols = c("X", "Y"), cutoff = 15) # Need specific meshes because not for all hauls did we record all species

    # 3. breakpoint oxygen
    m3 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + breakpt(oxy_sc),
                 data = dd,
                 mesh = mesh,
                 family = delta_gamma(link1 = "logit", link2 = "log"),
                 spatiotemporal = "off",
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f,
                 time = "year",
                 control = sdmTMBcontrol(newton_loops = 2))

    m3st <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + breakpt(oxy_sc),
                 data = dd,
                 mesh = mesh,
                 family = delta_gamma(link1 = "logit", link2 = "log"),
                 spatiotemporal = "IID",
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f,
                 time = "year",
                 control = sdmTMBcontrol(newton_loops = 2))    
    
    coef_m3 <- tidy(m3, conf.int = TRUE) |> filter(!grepl('year', term)) |> mutate(st = "no", model = "m3", group = i)
    coef_m3st <- tidy(m3_st, conf.int = TRUE) |> filter(!grepl('year', term)) |> mutate(st = "yes", model = "m3", group = i)

    data_list_pars[[i]] <- bind_rows(coef_m3, coef_m3st)
    
}

# Save predictions and sims as data frames
data_pars <- bind_rows(data_list_pars)

write_csv(data_pars, paste0(home, "/output/data_pars_test_st.csv"))

# Plot!
data_pars |> 
  ggplot(aes(term, estimate, ymin = conf.low, ymax = conf.high, color = st)) + 
  geom_point(position = position_dodge(width = 0.3)) + 
  geom_errorbar(width = 0, position = position_dodge(width = 0.3)) + 
  facet_wrap(~group, scales = "free", ncol = 2) +
  geom_hline(yintercept = 0, linetype = 2, alpha = 0.3) +
  coord_flip() + 
  scale_color_brewer(palette = "Set1")

ggsave("figures/st_par_comparison.pdf", width = 17, height = 17, units = "cm")
```

- So does this mean I can use a tweedie? Seems that ST was the main thing messing up the residuals anyway..

```{r}
dd <- d |> filter(group == "cod_adult")
    
mesh <- make_mesh(dd, xy_cols = c("X", "Y"), cutoff = 15) # Need specific meshes because not for all hauls did we record all species

m3 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + breakpt(oxy_sc),
             data = dd,
             mesh = mesh,
             family = delta_gamma(link1 = "logit", link2 = "log"),
             spatiotemporal = "IID",
             spatial = "off",
             spatial_varying = ~0 + quarter_f,
             time = "year",
             control = sdmTMBcontrol(newton_loops = 2))

m3_tweedie <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + breakpt(oxy_sc),
                     data = dd,
                     mesh = mesh,
                     family = tweedie(link = "log"),
                     spatiotemporal = "IID",
                     spatial = "off",
                     spatial_varying = ~0 + quarter_f,
                     time = "year",
                     control = sdmTMBcontrol(newton_loops = 2))


dd$res_1 <- residuals(m3, model = 1)
dd$res_2 <- residuals(m3, model = 2)
dd$res <- residuals(m3_tweedie)
    
p1 <- ggplot(dd, aes(sample = res_1)) +
      stat_qq() +
      stat_qq_line() +
      labs(y = "Sample Quantiles", x = "Theoretical Quantiles", title = "Binomial") + 
      theme(aspect.ratio = 1)
    
p2 <- ggplot(dd, aes(sample = res_2)) +
      stat_qq() +
      stat_qq_line() +
      labs(y = "Sample Quantiles", x = "Theoretical Quantiles", title = "Gamma") + 
      theme(aspect.ratio = 1)
    
p3 <- ggplot(dd, aes(sample = res)) +
      stat_qq() +
      stat_qq_line() +
      labs(y = "Sample Quantiles", x = "Theoretical Quantiles", title = "Tweedie") + 
      theme(aspect.ratio = 1)

(p1 + p2) / (plot_spacer() + p3)

ggsave("figures/tweedie_delta_st_comp_qq.pdf", width = 17, height = 17, units = "cm")
```

Test the above for all species

```{r}
for(i in unique(d$group)) { 
    
    dd <- d |> filter(group == i)

    mesh <- make_mesh(dd, xy_cols = c("X", "Y"), cutoff = 15)

    # This is m3 (bp oxy)
    m3 <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + temp_sc + temp_sq + breakpt(oxy_sc),
                 data = dd,
                 mesh = mesh,
                 family = tweedie(link = "log"),
                 spatiotemporal = "AR1",
                 spatial = "off",
                 spatial_varying = ~0 + quarter_f,
                 time = "year",
                 control = sdmTMBcontrol(newton_loops = 2))
        
    # Check again to be safe...
    sanity(m3)

    samps <- sdmTMBextra::predict_mle_mcmc(m3, mcmc_iter = 201, mcmc_warmup = 200)
    mcmc_res <- residuals(m3, type = "mle-mcmc", mcmc_samples = samps)
    
    ggplot(dd, aes(sample = mcmc_res)) +
      stat_qq() +
      stat_qq_line() +
      labs(y = "Sample Quantiles", x = "Theoretical Quantiles") + 
      theme(aspect.ratio = 1)

    ggsave(paste0(home, "/figures/supp/qq-sdm-01/st-fields-tweedie-ar1/qq_", i, ".pdf"),
           width = 11, height = 11, units = "cm")
    
}
```


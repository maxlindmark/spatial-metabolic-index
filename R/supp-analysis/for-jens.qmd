---
title: "Predict biomass density in space from delta models and average by ICES rectangle"
author: "Max Lindmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Intro

Code to read and predict biomass density of cod and flounder, by juveniles and adults separately, then average those by ICES rectangle as well as environmental variables. The environmental varialbes (temperature, oxygen [ml/L], and salinity) are downloaded from Copernicus. Oxygen is from the [Baltic Sea Biogeochemistry Reanalysis](https://data.marine.copernicus.eu/product/BALTICSEA_MULTIYEAR_BGC_003_012/description), and salinity and temperature come from [the Baltic Sea Physics Reanalysis](https://data.marine.copernicus.eu/product/BALTICSEA_MULTIYEAR_PHY_003_011/description). Depth is from [EMODnet Bathymetry](https://emodnet.ec.europa.eu/en/bathymetry).

This is from a paper in progress that lives at [this repository](https://github.com/maxlindmark/spatial-metabolic-index) though the models are largely expansions of the model published in this [paper](https://doi.org/10.1093/icesjms/fsad084).

The model here is a spatiotemporal delta-gamma model, with a spatially varying factor effect. We fit this to biomass density from the BITS survey for years 1993-2021, in subdivisions 24-28:

$$
\begin{aligned}
\mathbb{E}[y_{\boldsymbol{s},t}] &= \mu_{\boldsymbol{s},t},\\
\mu_{\boldsymbol{s},t} &=
f^{-1} \left( \boldsymbol{X}^{\mathrm{main}}_{\boldsymbol{s},t} \boldsymbol{\beta} +
\boldsymbol{X}^{\mathrm{svc}}_{\boldsymbol{s},t} \zeta_{\boldsymbol{s}} +
\epsilon_{\boldsymbol{s},t} \right)
\end{aligned}
$$

- $y_{\boldsymbol{s},t}$: biomass density \[$\text{kg/km}^2$\] at point $\boldsymbol{s}$ and time $t$

- $\mu$: mean

- $f$: link function

- $\boldsymbol{X}^{\mathrm{main}}$, and $\boldsymbol{X}^{\mathrm{svc}}$: design matrices ('main' = main effects, and 'svc' = spatially varying coefficients)

- $\boldsymbol{\beta}$: vector of fixed-effect coefficients

- $\zeta_{\boldsymbol{s}}$: spatially varying coefficients (a random field), $\zeta_{\boldsymbol{s}} \sim \mathrm{MVN}(\boldsymbol{0},\boldsymbol{\Sigma}_\zeta)$

- $\epsilon_{\boldsymbol{s},t}$: spatiotemporal random field, $\epsilon_{\boldsymbol{s},t} \sim \mathrm{MVN}(\boldsymbol{0},\boldsymbol{\Sigma}_{\epsilon})$

## Load packages & source functions

```{r load libraries}
#| message: false
#| warning: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "RCurl", "devtools", "RColorBrewer", "here", "sdmTMBextra", "mapplots", "sdmTMB", "viridis") 

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library, character.only = T))

# Source code for map plots
# You need: # devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/maxlindmark/pred-prey-overlap/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")

# Set path
home <- here::here()
```

## Load the model objects

```{r}
cod_adult <-    readRDS(paste0(home, "/output/models/sdm_01_m3_cod_adult.rds"))
cod_juvenile <- readRDS(paste0(home, "/output/models/sdm_01_m3_cod_juvenile.rds"))
fle_adult <-    readRDS(paste0(home, "/output/models/sdm_01_m3_flounder_adult.rds"))
fle_juvenile <- readRDS(paste0(home, "/output/models/sdm_01_m3_flounder_juvenile.rds"))
```

## Load the prediction grid and data

```{r}
# Read data
d <- readr::read_csv(paste0(home, "/data/clean/catch_clean.csv")) |>
  rename(X = x, Y = y) |> 
  pivot_longer(c(cod_adult, cod_juvenile, dab_adult, dab_juvenile, flounder_adult,
                 flounder_juvenile, plaice_adult, plaice_juvenile),
               names_to = "group", values_to = "density") |> 
  separate(group, into = c("species", "life_stage"), remove = FALSE) |> 
  drop_na(depth, temp, oxy, sal, density)

# Read prediction grid
pred_grid <- bind_rows(readr::read_csv(paste0(home, "/data/clean/pred_grid_(1_2).csv")),
                       readr::read_csv(paste0(home, "/data/clean/pred_grid_(2_2).csv")))

# Scale variables with respect to data, not the prediction grid!
pred_grid <- pred_grid |> 
  drop_na(depth, temp, oxy, sal) |> 
  mutate(temp_sc = (temp - mean(d$temp)) / sd(d$temp),
         temp_sq = temp_sc^2,
         oxy_sc = (oxy - mean(d$oxy)) / sd(d$oxy),
         oxy_sq = oxy_sc^2,
         sal_sc = (sal - mean(d$sal)) / sd(d$sal),
         depth_sc = scale(depth),
         depth_sq = depth_sc*depth_sc) |> # not sure this is needed!
  mutate(quarter_f = as.factor(quarter),
         year_f = as.factor(year)) |> 
  ungroup()
```

## Predict!

```{r}
p_cod_adult <- predict(cod_adult, newdata = pred_grid, type = "response")
p_cod_juvenile <- predict(cod_juvenile, newdata = pred_grid, type = "response")
p_fle_adult <- predict(fle_adult, newdata = pred_grid, type = "response")
p_fle_juvenile <- predict(fle_juvenile, newdata = pred_grid, type = "response")
```

## Combine data
Make it long format, group by variable, then average across space by year and quarter

```{r}
pred_df <- bind_rows(p_cod_adult |> mutate(group = "cod_adult"),
                     p_cod_juvenile |> mutate(group = "cod_juvenile"),
                     p_fle_adult |> mutate(group = "flounder_adult"),
                     p_fle_juvenile |> mutate(group = "flounder_juvenile")) |> 
  drop_na(est) |> 
  pivot_wider(names_from = group, values_from = est)

str(pred_df)

# Now make it long across *all* variables, then summarize
#unique(is.na(pred_df |> dplyr::select(cod_adult, cod_juvenile, flounder_adult, flounder_juvenile, oxy, temp, sal)))

pred_df_sum <- pred_df |> 
  rename("sea_floor_oxygen" = "oxy",
         "sea_floor_temperature" = "temp",
         "sea_floor_salinity" = "sal") |> 
  pivot_longer(c("cod_adult", "cod_juvenile", "flounder_adult", "flounder_juvenile",
                 "sea_floor_oxygen", "sea_floor_temperature", "sea_floor_salinity")) |>
  drop_na(value) |> # not entirely sure why I have NAs in the biomass predictions when I don't have it in th
  group_by(name, ices_rect, quarter, year) |> 
  summarise(ices_rect_avg = mean(value)) |> 
  ungroup()
```

## Add spatial information so we can plot in space
Use `mapplots::ices.rect` to get centre point of ices rect coordinates, then convert that to UTM using `sdmTMB::add_utm_columns`

```{r}
pred_df_sum <- pred_df_sum |> 
  mutate(lat = ices.rect(ices_rect)$lat,
         lon = ices.rect(ices_rect)$lon)
  
pred_df_sum <- pred_df_sum |> add_utm_columns(ll_names = c("lon", "lat"), utm_crs = 32633)
```

## Add units

```{r}
pred_df_sum <- pred_df_sum |> 
  mutate(unit = ifelse(name %in% c("cod_adult", "cod_juvenile", "flounder_adult", "flounder_juvenile"), 
                       "kg/km2",
                       NA),
         unit = ifelse(name == "sea_floor_oxygen", "ml/L", unit),
         unit = ifelse(name == "sea_floor_temperature", "Â°C", unit),
         unit = ifelse(name == "sea_floor_salinity", "per mille", unit))
```


## Plot and save!
Loop through all variables, plot for each year and quarter

```{r}
#| fig-height: 8
#| message: false
#| warning: false
dd <- c()

for(i in unique(pred_df_sum$name)){
  
  dd <- pred_df_sum |>
    filter(name == i) |>
    mutate(name = str_replace(name, "_", " ")) |> 
    mutate(name = str_replace(name, "_", " "))
  
  print(
    plot_map_fc + 
    # for simplicity I'll plot them as points...
    #geom_raster(data = dd, aes(X*1000, Y*1000, fill = ices_rect_avg)) +
    geom_point(data = dd |> filter(quarter == 1),
               aes(X*1000, Y*1000, color = ices_rect_avg), size = 1.8) +
    scale_color_viridis(trans = "sqrt") +
    facet_wrap(~year) +
    labs(title = paste(dd$name[1], dd$unit[1], sep = " "), subtitle = "Quarter 1") +
    NULL
  )
  
  print(plot_map_fc +
    geom_point(data = dd |> filter(quarter == 4),
               aes(X*1000, Y*1000, color = ices_rect_avg), size = 1.8) +
    scale_color_viridis(trans = "sqrt") +
    facet_wrap(~year) +
    labs(title = paste(dd$name[1], dd$unit[1], sep = " "), subtitle = "Quarter 4") +
    NULL
  )
}

```

## Save data!

```{r}
write_csv(pred_df_sum, paste0(home, "/R/supp-analysis/for-jens/ices_rectangle_variables.csv"))
```



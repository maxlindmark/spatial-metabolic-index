---
title: "Plot conditional effects of smooth MI"
author: "Max Lindmark"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    fig-width: 8
    #fig-asp: 0.618
knitr: 
  opts_chunk:
    fig.align: center
editor: source
execute: 
  echo: true
  eval: true
  cache: false
---

## Intro

To test possible explanations for why the MI models are not preferred when not modelled as a smooth, we can show the unimodal conditional effects

## Load packages & source functions

```{r load libraries}
#| message: false
#| warning: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "RCurl", "devtools", "visreg",
          "RColorBrewer", "here", "sdmTMBextra") 

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library, character.only = T))

# Packages not on CRAN or dev version
# remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE)
library(sdmTMB)

# Source code for map plots
# You need: # devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/maxlindmark/pred-prey-overlap/main/R/functions/map-plot.R")
options(ggplot2.continuous.colour = "viridis")

# Set path
home <- here::here()
```

## Read data

## Read data

```{r read data}
# Read data
d <- #readr::read_csv("https://raw.githubusercontent.com/maxlindmark/spatial-metabolic-index/main/data/clean/catch_clean.csv") |>
  readr::read_csv(paste0(home, "/data/clean/catch_clean.csv")) |>
  rename(X = x, Y = y) |> 
  pivot_longer(c(cod_adult, cod_juvenile, dab_adult, dab_juvenile, flounder_adult,
                 flounder_juvenile, plaice_adult, plaice_juvenile),
               names_to = "group", values_to = "density") |> 
  separate(group, into = c("species", "life_stage"), remove = FALSE) |> 
  drop_na(depth, temp, oxy, sal, density)

# Read metabolic parameter estimates and left_join
mi_pars <- #readr::read_csv("https://raw.githubusercontent.com/maxlindmark/spatial-metabolic-index/main/data/clean/mi_params.csv") |>
  readr::read_csv(paste0(home, "/data/clean/mi_params.csv")) |> 
  dplyr::select(n_o2, E_o2, A0_o2, species) #  TODO: remove the extra columns for pressure based parameters

# TODO: for now we'll use plaice parameters for flounder, see "00_estimate_mi_params.Rmd"
mi_pars

mi_pars <- mi_pars |> 
  mutate(A0_o2 = ifelse(species == "flounder",
                        filter(mi_pars, species == "plaice")$A0_o2,
                        A0_o2))

d <- left_join(d, mi_pars, by = "species")

# Read size csv to calculate the metabolic index
sizes <- #readr::read_csv("https://raw.githubusercontent.com/maxlindmark/spatial-metabolic-index/main/data/clean/sizes.csv") |> 
  readr::read_csv(paste0(home, "/data/clean/sizes.csv")) |>
  mutate(group = paste(species, name, sep = "_")) |> 
  dplyr::select(group, B)

d <- left_join(d, sizes, by = "group")

# Drop dab!
# d |>
#   filter(group == "dab_juvenile" & quarter == 1) |>
#   mutate(pres = ifelse(density > 0, "1", "0")) |>
#   ggplot(aes(X, Y, color = pres)) +
#   geom_point(size = 0.3) +
#   coord_fixed() +
#   facet_wrap(~year)
# 
# d |>
#   filter(group == "dab_juvenile" & quarter == 4) |>
#   mutate(pres = ifelse(density > 0, "1", "0")) |>
#   ggplot(aes(X, Y, color = pres)) +
#   geom_point(size = 0.3) +
#   coord_fixed() +
#   facet_wrap(~year)

d <- d |> filter(!species == "dab")
```

## Calculate the metabolic index

```{r calculate metabolic index}
# Oxygen is ml/L, We want micro mol/L. 1 ml/l = 10^3/22.391 = 44.661 micro mol/l
d$oxy_si <- (d$oxy * (10^3)) / 22.391

# Calculate metabolic indices for a given mass and the temperature and oxygen in data
# Line 123 in https://github.com/fate-spatialindicators/SDM_O2/blob/master/code/mi_functions.R
kb <- 0.000086173324 # Boltzmann's constant
t_ref <- 15 # arbitrary reference temperature

# Calculate the metabolic index
d <- d |>
  mutate(inv_temp = (1/(temp + 273.15) - 1/(t_ref + 273.15)),
         phi = A0_o2*(B^n_o2)*oxy_si * exp((E_o2/kb)*inv_temp)) |> 
  drop_na(phi)
```

## Scale variables

```{r}
d <- d |> 
  group_by(group) |> 
  mutate(phi_sc = scale(phi),
         temp_sc = scale(temp),
         temp_sq = temp_sc^2,
         oxy_sc = scale(oxy),
         oxy_sq = oxy_sc^2,
         sal_sc = scale(sal),
         depth_sc = scale(depth),
         depth_sq = depth_sc*depth_sc) |> # not sure this is needed!
  mutate(quarter_f = as.factor(quarter),
         year_f = as.factor(year)) |> 
  ungroup()
```

## Fit a smooth metabolic index model
Plot residuals, save model object, plot conditional effects!

```{r}
pred_fit <- list()
pred_res <- list()

for(i in unique(d$group)) { 
    
    dd <- d |> filter(group == i)

    mesh <- make_mesh(dd, xy_cols = c("X", "Y"), cutoff = 15)

    # this is m3 (bp oxy)
    m <- sdmTMB(density ~ 0 + year_f + quarter_f + sal_sc + depth_sc + depth_sq + s(phi_sc),
                data = dd,
                mesh = mesh,
                family = tweedie(link = "log"),
                spatiotemporal = "IID",
                spatial = "off",
                spatial_varying = ~0 + quarter_f,
                time = "year")
        
    # Check again to be safe...
    sanity(m)

    p <- visreg(m, xvar = "phi_sc", plot = FALSE)
    fit <- p$fit
    res <- p$res
    
    pred_fit[[i]] <- fit |> mutate(group = i)
    pred_res[[i]] <- res |> mutate(group = i)
    
}

f <- bind_rows(pred_fit)
r <- bind_rows(pred_res) |> mutate(phi_sc = as.numeric(phi_sc))

write_csv(f, paste0(home, "/output/f_smooth_phi_conditional.csv"))
write_csv(r, paste0(home, "/output/r_smooth_phi_conditional.csv"))
```

## Plot!

```{r}
r <- read_csv(paste0(home, "/output/r_smooth_phi_conditional.csv")) |> 
  mutate(group = str_to_sentence(str_replace(group, "_", " ")))

f <- read_csv(paste0(home, "/output/f_smooth_phi_conditional.csv")) |> 
  mutate(group = str_to_sentence(str_replace(group, "_", " ")))

ggplot(f, aes(x = phi_sc, y = visregFit)) +
  facet_wrap(~group, ncol = 2, scales = "free") +
  geom_point(aes(y = visregRes), data = r, size = 1, alpha = 0.15) + 
  geom_ribbon(aes(ymin = visregLwr, ymax = visregUpr), alpha = 0.3, fill = "tomato3") +
  geom_line(color = "tomato3", linewidth = 1.2) +
  NULL

ggsave(paste0(home, "/figures/supp/smooth_phi.pdf"), width = 17, height = 17, units = "cm")
```

